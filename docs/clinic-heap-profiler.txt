
  <title>Clinic.js Heap Profiler</title> - v{{version}}

  <code>clinic heapprofiler</code> helps you find memory leaks
  by creating a flamegraph visualization that assists in identifying
  function calls that may be leaking memory.

  To run <code>clinic heapprofiler</code>

    <code>clinic heapprofiler -- node server.js</code>

  Once you exit (Ctrl-C) the process, your report will open in a browser window. You can disable this behavior:

    <code>clinic heapprofiler --open=false -- node server.js</code>

  If profiling on a server, it can be useful to only do data collection:

    <code>clinic heapprofiler --collect-only -- node server.js</code>

  You can then transfer the data and visualize it locally:

    <code>clinic heapprofiler --visualize-only PID.clinic.heapprofile</code>

  You can use the --autocannon flag to simulate load on your server.
  --autocannon accepts configuration for autocannon using "subarg" syntax:

    <code>clinic heapprofiler --autocannon [ -m POST /api/example ] -- node server.js</code>

  When configuring --autocannon, the $PORT environment variable contains the
  port your server is listening on:

    <code>clinic heapprofiler --autocannon [ -m POST 'http://localhost:$PORT/?\$page=1' ] -- node server.js</code>

  Note that dollar signs ($) appearing in the URL must be escaped, else they
  will be treated as environment variables as well.

  <h1>Flags</h1>
  -h | --help                Display Help
  -v | --version             Display Version
  --collect-only             Do not process data on termination
  --visualize-only datapath  Build or rebuild visualization from data
  --on-port                  Run a script when the server starts listening on a port.
  --autocannon               Run the autocannon benchmarking tool when the server starts listening on a port.
  --open                     Boolean to enable or disable your report opening in your web browser.
  --dest                     Destination for the collected data (default <code>.clinic/</code>).
